Question 1: What are looping statements in Python?
Answer: Looping statements, also known as loops, are control structures that allow you to execute a block of code repeatedly based on a condition. They help in automating repetitive tasks.

Question 2: How many types of loops are available in Python?
Answer: There are two main types of loops in Python: for loops and while loops.

Question 3: What is the purpose of a for loop?
Answer: A for loop is used to iterate over a sequence (such as a list, tuple, string, or range) and execute a block of code for each item in the sequence.

Question 4: How do you write a basic for loop?
Answer: Here's an example of a basic for loop:

for item in sequence:
    # Code to be executed for each item
Question 5: What is the purpose of a while loop?
Answer: A while loop is used to repeatedly execute a block of code as long as a specified condition is True.

Question 6: How do you write a basic while loop?
Answer: Here's an example of a basic while loop:

while condition:
    # Code to be executed while condition is True
Question 7: How can you exit a loop prematurely?
Answer: You can use the break statement to exit a loop prematurely, regardless of the loop's condition.

Question 8: How can you skip the current iteration and continue to the next iteration of a loop?
Answer: You can use the continue statement to skip the current iteration and proceed to the next one.

Question 9: Explain the range() function.
Answer: The range() function generates a sequence of numbers within a specified range. It is often used with for loops to iterate a specific number of times.

Question 10: How can you iterate over both the index and value of a list using a for loop?
Answer: You can use the enumerate() function to iterate over both the index and value of a list simultaneously in a for loop.

Question 11: What is an infinite loop?
Answer: An infinite loop is a loop that runs indefinitely because its termination condition is never met. It can be unintentional and may cause your program to hang.

Question 12: Explain the concept of a nested loop.
Answer: A nested loop is a loop inside another loop. It allows you to iterate over a sequence within another loop, enabling more complex iterations and patterns.

Question 13: How can you prevent a nested loop from affecting the outer loop?
Answer: To prevent a nested loop from affecting the outer loop prematurely, you can use the break statement within the inner loop.

Question 14: What is the purpose of the else clause in a loop?
Answer: The else clause in a loop is executed when the loop's condition becomes False. It is not executed if the loop is terminated by a break statement.

Question 15: How do you create a loop that runs a specific number of times?
Answer: You can use the range() function with a for loop to specify the number of iterations:

for i in range(5):
    # Code to be executed 5 times
Question 16: How can you achieve a "do-while" loop behavior in Python?
Answer: Python does not have a built-in "do-while" loop like some other languages. However, you can simulate it using a while loop with a condition that is initially True.

Question 17: Write a Python program to calculate the sum of all even numbers from 1 to 100 using a loop.
Answer:

sum_even = 0
for num in range(2, 101, 2):
    sum_even += num
print(sum_even)
Question 18: Write a Python program to find the factorial of a number using a loop.
Answer:

def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

num = 5
print(factorial(num))
Question 19: Explain the difference between a for loop and a while loop.
Answer: A for loop is used when you know the number of iterations in advance and want to iterate over a sequence. A while loop is used when you don't know the exact number of iterations and want to repeat a block of code until a certain condition is met.

Question 20: How can you iterate over the characters of a string using a loop?
Answer: You can use a for loop to iterate over the characters of a string directly:

text = "Hello"
for char in text:
    print(char)
